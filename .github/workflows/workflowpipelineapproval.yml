name: LZ Management Groups Deployment

on:
  workflow_dispatch:

env:
  terraformVersion: '1.5.7'

jobs:
  plan-managementgroups:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4.1.1

      - uses: azure/login@v2.1.0
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          audience: api://AzureADTokenExchange #OIDC audience restriction for Azure login in your GitHub Actions workflow,

      - uses: hashicorp/setup-terraform@v3.1.0
        with:
          terraform_version: ${{ env.terraformVersion }}

      - name: Run tflint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          cd modules/managementgroups
          tflint --init
          tflint

      - name: Run tfsec
        shell: bash
        run: |
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash -s -- -b /usr/local/bin
          cd modules/managementgroups
          tfsec .

      - name: Run bootstrap script for creating storage for statefile
        run: |
          chmod +x modules/managementgroups/bootstrap.sh
          modules/managementgroups/bootstrap.sh

      - name: Terraform Init and Plan management groups
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          TF_VAR_backend_resource_group_name: ${{ secrets.BACKEND_RESOURCE_GROUP_NAME }}
          TF_VAR_backend_storage_account_name: ${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}
          TF_VAR_backend_container_name: ${{ secrets.BACKEND_CONTAINER_NAME }}
          TF_VAR_backend_key: managementgroups.terraform.tfstate
        run: |
          cd modules/managementgroups
          terraform init -reconfigure \
            -backend-config="resource_group_name=${TF_VAR_backend_resource_group_name}" \
            -backend-config="storage_account_name=${TF_VAR_backend_storage_account_name}" \
            -backend-config="container_name=${TF_VAR_backend_container_name}" \
            -backend-config="key=${TF_VAR_backend_key}" 
          terraform plan -out=tfplan
          terraform show -no-color tfplan > plan.txt   
        
      - name: List files for debug
        run: ls -l modules/managementgroups

      - name: Upload lock file
        uses: actions/upload-artifact@v4
        with:
          name: terraform-lock
          path: modules/managementgroups/.terraform.lock.hcl

  apply-managementgroups:
    needs: plan-managementgroups
    runs-on: ubuntu-latest
    environment: prod-approval
    permissions:
      id-token: write
      contents: read
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4.1.1

      - uses: azure/login@v2.1.0
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          audience: api://AzureADTokenExchange

      - uses: hashicorp/setup-terraform@v3.1.0
        with:
          terraform_version: ${{ env.terraformVersion }}

      - name: Download tfplan artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-artifact
          path: modules/managementgroups

      - name: Download lock file
        uses: actions/download-artifact@v4
        with:
          name: terraform-lock
          path: modules/managementgroups

      - name: Terraform Init
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          TF_VAR_backend_resource_group_name: ${{ secrets.BACKEND_RESOURCE_GROUP_NAME }}
          TF_VAR_backend_storage_account_name: ${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}
          TF_VAR_backend_container_name: ${{ secrets.BACKEND_CONTAINER_NAME }}
          TF_VAR_backend_key: managementgroups.terraform.tfstate
        run: |
          cd modules/managementgroups
          terraform init -reconfigure \
            -backend-config="resource_group_name=${TF_VAR_backend_resource_group_name}" \
            -backend-config="storage_account_name=${TF_VAR_backend_storage_account_name}" \
            -backend-config="container_name=${TF_VAR_backend_container_name}" \
            -backend-config="key=${TF_VAR_backend_key}" 
          terraform plan -out=tfplan
          terraform show -no-color tfplan > plan.txt   

      - name: Terraform Apply management groups
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          TF_VAR_backend_resource_group_name: ${{ secrets.BACKEND_RESOURCE_GROUP_NAME }}
          TF_VAR_backend_storage_account_name: ${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}
          TF_VAR_backend_container_name: ${{ secrets.BACKEND_CONTAINER_NAME }}
          TF_VAR_backend_key: managementgroups.terraform.tfstate
        run: |
          cd modules/managementgroups
          terraform apply -auto-approve tfplan

      - name: Terraform Drift Detection
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          TF_VAR_backend_resource_group_name: ${{ secrets.BACKEND_RESOURCE_GROUP_NAME }}
          TF_VAR_backend_storage_account_name: ${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}
          TF_VAR_backend_container_name: ${{ secrets.BACKEND_CONTAINER_NAME }}
          TF_VAR_backend_key: managementgroups.terraform.tfstate
        run: |
          cd modules/managementgroups
          terraform init -reconfigure \
            -backend-config="resource_group_name=${TF_VAR_backend_resource_group_name}" \
            -backend-config="storage_account_name=${TF_VAR_backend_storage_account_name}" \
            -backend-config="container_name=${TF_VAR_backend_container_name}" \
            -backend-config="key=${TF_VAR_backend_key}"
          terraform plan -detailed-exitcode

      - name: Terraform Apply Drift Remediation
        if: ${{ steps.terraform_drift_detection.outcome == 'failure' }}
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: |
          cd modules/managementgroups
          terraform apply -auto-approve