name: Terraform Management Groups

on:
  workflow_dispatch:
    inputs:
      stageToRun:
        description: 'Select Stage to Run'
        required: true
        default: 'DeployModules'
        type: choice
        options:
          - DeployModules
          - DestroyModules
      jobToRun:
        description: 'Select Module to Deploy'
        required: true
        default: 'DeployManagementGroups'
        type: choice
        options:
          - DeployManagementGroups
          - DestroyManagementGroups

permissions:
  id-token: write
  contents: read

env:
  terraformVersion: '1.5.7'

jobs:
  deploy-managementgroups:
    if: ${{ github.event.inputs.stageToRun == 'DeployModules' && github.event.inputs.jobToRun == 'DeployManagementGroups' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.terraformVersion }}

      - name: Terraform Init and Plan management groups
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          TF_VAR_backend_resource_group_name: ${{ secrets.BACKEND_RESOURCE_GROUP_NAME }}
          TF_VAR_backend_storage_account_name: ${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}
          TF_VAR_backend_container_name: ${{ secrets.BACKEND_CONTAINER_NAME }}
          TF_VAR_backend_key: managementgroups.terraform.tfstate
        run: |
          cd modules/managementgroups
          terraform init -reconfigure \
            -backend-config="resource_group_name=${TF_VAR_backend_resource_group_name}" \
            -backend-config="storage_account_name=${TF_VAR_backend_storage_account_name}" \
            -backend-config="container_name=${TF_VAR_backend_container_name}" \
            -backend-config="key=${TF_VAR_backend_key}"
          terraform plan -out=tfplan

      - name: Terraform Apply management groups
        if: ${{ success() }}
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: |
          cd modules/managementgroups
          terraform apply -auto-approve tfplan


  destroy-managementgroups:
    if: ${{ github.event.inputs.stageToRun == 'DestroyModules' && github.event.inputs.jobToRun == 'DestroyManagementGroups' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.terraformVersion }}

      - name: Terraform Destroy management groups
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          TF_VAR_backend_resource_group_name: ${{ secrets.BACKEND_RESOURCE_GROUP_NAME }}
          TF_VAR_backend_storage_account_name: ${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}
          TF_VAR_backend_container_name: ${{ secrets.BACKEND_CONTAINER_NAME }}
          TF_VAR_backend_key: managementgroups.terraform.tfstate
        run: |
          cd modules/managementgroups
          terraform init -reconfigure \
            -backend-config="resource_group_name=${TF_VAR_backend_resource_group_name}" \
            -backend-config="storage_account_name=${TF_VAR_backend_storage_account_name}" \
            -backend-config="container_name=${TF_VAR_backend_container_name}" \
            -backend-config="key=${TF_VAR_backend_key}"
          terraform destroy -auto-approve