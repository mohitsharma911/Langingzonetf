trigger: none


parameters:
- name: stageToRun
  displayName: "Select Stage to Run"
  type: string
  default: DeployModules
  values:
    - DeployModules
    - DestroyModules
- name: jobToRun
  displayName: "Select Module to Deploy"
  type: string
  default: DeployManagementGroups 
  values:
    - DeployManagementGroups
    - DestroyManagementGroups

variables:
  - group: landingzone
  - group: Terraform_SPN
  - name: terraformVersion
    value: '1.5.7'

stages:
- stage: DeployManagementGroups
  displayName: 'Deploy Management Groups Module'
  condition: and(eq('${{ parameters.stageToRun }}', 'DeployModules'), eq('${{ parameters.jobToRun }}', 'DeployManagementGroups'))
  jobs:
  - job: DeployManagementGroups
    displayName: 'Deploy managementgroups module'
    pool:
      vmImage: 'ubuntu-latest'
    timeoutInMinutes: 15
    cancelTimeoutInMinutes: 15
    steps:
    - checkout: self
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
    - script: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      displayName: 'Install Azure CLI'
    - script: |
        wget https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
        unzip terraform_$(terraformVersion)_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
        terraform -version
        backend_key="landingzone-$(env).tfstate"
        echo "##vso[task.setvariable variable=backend_key]$backend_key"            
      displayName: 'Install Terraform'
    - script: |
        export TF_VAR_backend_resource_group_name=$(backend_resource_group_name)
        export TF_VAR_backend_storage_account_name=$(backend_storage_account_name)
        export TF_VAR_backend_container_name=$(backend_container_name)
        export TF_VAR_backend_key=$(backend_key)          
        export ARM_CLIENT_ID="$(ARM_CLIENT_ID)"
        export ARM_CLIENT_SECRET="$(ARM_CLIENT_SECRET)"
        export ARM_SUBSCRIPTION_ID="$(ARM_SUBSCRIPTION_ID)"
        export ARM_TENANT_ID="$(ARM_TENANT_ID)"
        cd modules/managementgroups
        terraform init -reconfigure \
          -backend-config="resource_group_name=$(backend_resource_group_name)" \
          -backend-config="storage_account_name=$(backend_storage_account_name)" \
          -backend-config="container_name=$(backend_container_name)" \
          -backend-config="key=$(backend_key)"
        terraform plan -out=tfplan
    - script : |
          export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
          export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
          export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
          export ARM_TENANT_ID=$(ARM_TENANT_ID)
          cd modules/managementgroups
          terraform apply -auto-approve tfplan  
      displayName: 'Terraform Apply management groups'


- stage: DestroyManagementGroups
  displayName: 'Destroy Management Groups Module'
  condition: and(eq('${{ parameters.stageToRun }}', 'DestroyModules'), eq('${{ parameters.jobToRun }}', 'DestroyManagementGroups'))
  jobs:
  - job: DestroyManagementGroups
    displayName: 'Destroy managementgroups module'
    pool:
      vmImage: 'ubuntu-latest'
    timeoutInMinutes: 15
    cancelTimeoutInMinutes: 15
    steps:
    - checkout: self
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
    - script: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      displayName: 'Install Azure CLI'
    - script: |
        wget https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
        unzip terraform_$(terraformVersion)_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
        terraform -version
        backend_key="landingzone-$(env).tfstate"
        echo "##vso[task.setvariable variable=backend_key]$backend_key"
      displayName: 'Install Terraform'
    - script: |
        export TF_VAR_backend_resource_group_name=$(backend_resource_group_name)
        export TF_VAR_backend_storage_account_name=$(backend_storage_account_name)
        export TF_VAR_backend_container_name=$(backend_container_name)
        export TF_VAR_backend_key=$(backend_key)
        export ARM_CLIENT_ID="$(ARM_CLIENT_ID)"
        export ARM_CLIENT_SECRET="$(ARM_CLIENT_SECRET)"
        export ARM_SUBSCRIPTION_ID="$(ARM_SUBSCRIPTION_ID)"
        export ARM_TENANT_ID="$(ARM_TENANT_ID)"
        cd modules/managementgroups
        terraform init -reconfigure \
          -backend-config="resource_group_name=$(backend_resource_group_name)" \
          -backend-config="storage_account_name=$(backend_storage_account_name)" \
          -backend-config="container_name=$(backend_container_name)" \
          -backend-config="key=$(backend_key)"
        terraform destroy -auto-approve
      displayName: 'Terraform Destroy management groups'
